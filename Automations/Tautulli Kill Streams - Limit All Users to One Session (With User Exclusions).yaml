##################################################################################
##################################################################################
# Automation Title:                                             Updated 24.02.2025
#   Tautulli Kill Streams - Limit All Users to One Session (With User Exclusions)
#
##################################################################################
##################################################################################
# How to Use:
# 1) Copy this YAML snippet into your Home Assistant automations.
#    - If using "automations.yaml", paste it there.
#    - If using the UI-based editor, switch to YAML mode and paste it.
# 2) Adjust the 'excluded_users' list under 'variables:' to specify any users who
#    can have multiple concurrent sessions without termination.
# 3) Confirm that 'sensor.tautulli_stream_count' is the correct aggregator sensor
#    in your setup. It must have 'sessions' containing 'user', 'session_id', etc.
# 4) Reload or restart automations (Developer Tools → YAML → "Reload Automations")
#    or from the UI, so that this new automation is active.
#
# What It Does:
# - Whenever 'sensor.tautulli_stream_count' changes state, this automation checks
#   for duplicate sessions from non-excluded users.
# - If it detects multiple sessions for the same user, it kills the newest session
#   (unless the user is in 'excluded_users').
##################################################################################

alias: Tautulli Kill Streams - Limit All Users to One Session ( With User Exclusions)
description: >
  Terminates the newest stream when any non-excluded user has multiple active
  sessions, based on 'user' and 'start_time_raw'. Skips partial updates where
  session_id is missing or empty, and allows excluded users to have multiple 
  sessions without being terminated.

##############################################################################
# Variables:
#   A list of users you do NOT want to limit or kill.
##############################################################################
variables:
  excluded_users:
    - admin
    - plex_admin
    
mode: single

##############################################################################
# Trigger:
#   Fires whenever 'sensor.tautulli_stream_count' changes its main state.
##############################################################################
trigger:
  - platform: state
    entity_id: sensor.tautulli_stream_count

##############################################################################
# Condition:
#   Checks if there's more than one active session among non-excluded users,
#   ignoring partial updates (sessions lacking a valid session_id).
##############################################################################
condition:
  - condition: template
    value_template: >-
      {% set sessions = state_attr('sensor.tautulli_stream_count','sessions') %}
      {% if sessions is none or sessions|length <= 1 %}
        false
      {% else %}
        {% set ns = namespace(duplicate_found=false, seen=[]) %}
        {% for s in sessions %}
          {% if s.user is defined and s.user|trim != '' 
                 and s.session_id is defined and s.session_id|trim != '' %}
            {% set user_lower = s.user|lower|trim %}
            {% if user_lower not in excluded_users %}
              {% if user_lower in ns.seen %}
                {% set ns.duplicate_found = true %}
              {% else %}
                {% set ns.seen = ns.seen + [user_lower] %}
              {% endif %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {{ ns.duplicate_found }}
      {% endif %}

##############################################################################
# Actions:
#   1) Provide a notification listing detected duplicates (excluding certain 
#      users and ignoring sessions with no session_id).
#   2) Terminate the newest duplicate session for non-excluded users.
##############################################################################
action:
  ########################################################################
  # 1) Persistent Notification: Lists any detected duplicates 
  #    (skipping excluded users and partial updates).
  ########################################################################
  - service: persistent_notification.create
    data:
      title: "Duplicate Plex Sessions Detected"
      message: >-
        {% set sessions = state_attr('sensor.tautulli_stream_count','sessions') %}
        {% if sessions is not none %}
          {% set ns = namespace(duplicates=[]) %}
          {% set seen_users = namespace(list=[]) %}
          {% for s in sessions %}
            {% if s.user is defined and s.user|trim != '' 
                   and s.session_id is defined and s.session_id|trim != '' %}
              {% set user_lower = s.user|lower|trim %}
              {% if user_lower not in excluded_users %}
                {% if user_lower in seen_users.list %}
                  {% set ns.duplicates = ns.duplicates + [s] %}
                {% else %}
                  {% set seen_users.list = seen_users.list + [user_lower] %}
                {% endif %}
              {% endif %}
            {% endif %}
          {% endfor %}
          Found {{ ns.duplicates|length }} duplicate session(s):<br><br>
          {% for d in ns.duplicates %}
          - User: {{ d.user }}<br>
            Session ID: {{ d.session_id }}<br>
            Title: {{ d.full_title }}<br>
            start_time: {{ d.stream_start_time if d.stream_start_time is defined else 'unknown' }}<br><br>
          {% endfor %}
        {% else %}
          No sessions found.
        {% endif %}

  ########################################################################
  # 2) Terminate the Newest Duplicate Session (non-excluded, valid session_id)
  ########################################################################
  - service: tautulli_active_streams.kill_session_stream
    data:
      session_id: >-
        {% set sessions = state_attr('sensor.tautulli_stream_count','sessions') %}
        {% if sessions is none %}
          unknown
        {% else %}
          {% set ns = namespace(duplicates=[]) %}
          {% set seen_users = namespace(list=[]) %}
          {% for s in sessions %}
            {% if s.user is defined and s.user|trim != '' 
                   and s.session_id is defined and s.session_id|trim != '' %}
              {% set user_lower = s.user|lower|trim %}
              {% if user_lower not in excluded_users %}
                {% if user_lower in seen_users.list %}
                  {% set ns.duplicates = ns.duplicates + [s] %}
                {% else %}
                  {% set seen_users.list = seen_users.list + [user_lower] %}
                {% endif %}
              {% endif %}
            {% endif %}
          {% endfor %}
          {% if ns.duplicates|length > 0 %}
            {% set sorted = ns.duplicates|sort(attribute='start_time_raw') %}
            {{ sorted[-1].session_id }}
          {% else %}
            unknown
          {% endif %}
        {% endif %}
      message: "Admin Notified! Multiple sessions detected. Session Terminated."
##################################################################################
#  
#      please give our repo a like :)
#    
##################################################################################
